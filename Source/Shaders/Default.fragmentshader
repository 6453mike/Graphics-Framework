#version 330 core

in vec3 vertexPosition;
in vec3 vertexNormal;
in vec3 vertexColor;

out vec3 finalColor;

struct Light
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec4 position;
	vec3 direction;
	float cutoff, exponent;
	float constantAttenuation, linearAttenuation, quadraticAttenuation;
};

struct Material
{
	float ambient;
	float diffuse;
	float specular;
	float shininess;
};

uniform vec3 sceneAmbient;
uniform Light lights[2];
uniform Material material;

uniform mat4 ViewTransform;

void main()
{
	vec3 normalVector = normalize(vertexNormal);
	vec3 eyeVector = normalize(vec3(inverse(ViewTransform)[3]) - vertexPosition);
	vec3 lightVector;

	float attenuation = 0.0;

	vec3 totalColor = sceneAmbient * material.ambient;

	for (int i = 0; i < 2; i++)
	{
		if (int(lights[i].position.w) == 0) // Directional light
		{
			attenuation = 1.0;
			lightVector = normalize(vec3(lights[i].position));
		}
		else // Point light or spot light
		{
			lightVector = vec3(lights[i].position) - vertexPosition;

			float distance = length(lightVector);
			lightVector = normalize(lightVector);

			attenuation = 1.0 / (lights[i].constantAttenuation +
								lights[i].linearAttenuation * distance +
								lights[i].quadraticAttenuation * distance * distance);

			if (lights[i].cutoff <= 90.0) // Spot light
			{
				float cosAngle = max(dot(-lightVector, normalize(lights[i].direction)), 0.0);

				if (cosAngle >= cos(radians(lights[i].cutoff))) // In the spot light
				{
					attenuation = attenuation * pow(cosAngle, lights[i].exponent);
				}
				else
				{
					attenuation = 0.0;
				}
			}
		}

		float nDotL = max(dot(normalVector, lightVector), 0.0);

		vec3 Id = attenuation * lights[i].diffuse * material.diffuse * nDotL;
		vec3 Is = vec3(0.0, 0.0, 0.0);

		if (nDotL > 0)
		{
			Is = attenuation * lights[i].specular * material.specular *
				pow(max(dot(reflect(-lightVector, normalVector), eyeVector), 0.0), material.shininess);
		}

		totalColor = totalColor + Id + Is;		
	}

	finalColor = totalColor * vertexColor;
}
